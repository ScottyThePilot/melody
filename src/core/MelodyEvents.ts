import Command from '@core/Command';
import * as Discord from 'discord.js';

export default interface MelodyEvents {
  on(event: 'channelCreate' | 'channelDelete', listener: (channel: Discord.Channel) => void): this;
  on(event: 'channelPinsUpdate', listener: (channel: Discord.Channel, time: Date) => void): this;
  on(event: 'channelUpdate', listener: (oldChannel: Discord.Channel, newChannel: Discord.Channel) => void): this;
  on(event: 'command', listener: (data: Command.DataBasic) => void): this;
  on(event: 'debug' | 'warn', listener: (info: string) => void): this;
  on(event: 'disconnect', listener: (event: any, shardID: number) => void): this;
  on(event: 'emojiCreate' | 'emojiDelete', listener: (emoji: Discord.GuildEmoji) => void): this;
  on(event: 'emojiUpdate', listener: (oldEmoji: Discord.GuildEmoji, newEmoji: Discord.GuildEmoji) => void): this;
  on(event: 'error', listener: (error: Error) => void): this;
  on(event: 'guildBanAdd' | 'guildBanRemove', listener: (guild: Discord.Guild, user: Discord.User) => void): this;
  on(event: 'guildCreate' | 'guildDelete' | 'guildUnavailable' | 'guildIntegrationsUpdate', listener: (guild: Discord.Guild) => void): this;
  on(event: 'guildMemberAdd' | 'guildMemberAvailable' | 'guildMemberRemove', listener: (member: Discord.GuildMember) => void): this;
  on(event: 'guildMembersChunk', listener: (members: Discord.Collection<Discord.Snowflake, Discord.GuildMember>, guild: Discord.Guild) => void): this;
  on(event: 'guildMemberSpeaking', listener: (member: Discord.GuildMember, speaking: Readonly<Discord.Speaking>) => void): this;
  on(event: 'guildMemberUpdate', listener: (oldMember: Discord.GuildMember, newMember: Discord.GuildMember) => void): this;
  on(event: 'guildUpdate', listener: (oldGuild: Discord.Guild, newGuild: Discord.Guild) => void): this;
  on(event: 'inviteCreate' | 'inviteDelete', listener: (invite: Discord.Invite) => void): this;
  on(event: 'message' | 'messageDelete' | 'messageReactionRemoveAll', listener: (message: Discord.Message) => void): this;
  on(event: 'messageReactionRemoveEmoji', listener: (reaction: Discord.MessageReaction) => void): this;
  on(event: 'messageDeleteBulk', listener: (messages: Discord.Collection<Discord.Snowflake, Discord.Message>) => void): this;
  on(event: 'messageReactionAdd' | 'messageReactionRemove', listener: (messageReaction: Discord.MessageReaction, user: Discord.User) => void): this;
  on(event: 'messageUpdate', listener: (oldMessage: Discord.Message, newMessage: Discord.Message) => void): this;
  on(event: 'presenceUpdate', listener: (oldPresence: Discord.Presence | undefined, newPresence: Discord.Presence) => void): this;
  on(event: 'rateLimit', listener: (rateLimitData: Discord.RateLimitData) => void): this;
  on(event: 'ready' | 'invalidated', listener: () => void): this;
  on(event: 'roleCreate' | 'roleDelete', listener: (role: Discord.Role) => void): this;
  on(event: 'roleUpdate', listener: (oldRole: Discord.Role, newRole: Discord.Role) => void): this;
  on(event: 'typingStart' | 'typingStop', listener: (channel: Discord.Channel, user: Discord.User) => void): this;
  on(event: 'userUpdate', listener: (oldUser: Discord.User, newUser: Discord.User) => void): this;
  on(event: 'voiceStateUpdate', listener: (oldState: Discord.VoiceState, newState: Discord.VoiceState) => void): this;
  on(event: 'webhookUpdate', listener: (channel: Discord.TextChannel) => void): this;
  on(event: 'shardDisconnect', listener: (event: CloseEvent, id: number) => void): this;
  on(event: 'shardError', listener: (error: Error, id: number) => void): this;
  on(event: 'shardReady' | 'shardReconnecting', listener: (id: number) => void): this;
  on(event: 'shardResume', listener: (id: number, replayed: number) => void): this;
  //on(event: string, listener: (...args: any[]) => void): this;

  once(event: 'channelCreate' | 'channelDelete', listener: (channel: Discord.Channel) => void): this;
  once(event: 'channelPinsUpdate', listener: (channel: Discord.Channel, time: Date) => void): this;
  once(event: 'channelUpdate', listener: (oldChannel: Discord.Channel, newChannel: Discord.Channel) => void): this;
  once(event: 'command', listener: (data: Command.DataBasic) => void): this;
  once(event: 'debug' | 'warn', listener: (info: string) => void): this;
  once(event: 'disconnect', listener: (event: any, shardID: number) => void): this;
  once(event: 'emojiCreate' | 'emojiDelete', listener: (emoji: Discord.GuildEmoji) => void): this;
  once(event: 'emojiUpdate', listener: (oldEmoji: Discord.GuildEmoji, newEmoji: Discord.GuildEmoji) => void): this;
  once(event: 'error', listener: (error: Error) => void): this;
  once(event: 'guildBanAdd' | 'guildBanRemove', listener: (guild: Discord.Guild, user: Discord.User) => void): this;
  once(event: 'guildCreate' | 'guildDelete' | 'guildUnavailable' | 'guildIntegrationsUpdate', listener: (guild: Discord.Guild) => void): this;
  once(event: 'guildMemberAdd' | 'guildMemberAvailable' | 'guildMemberRemove', listener: (member: Discord.GuildMember) => void): this;
  once(event: 'guildMembersChunk', listener: (members: Discord.Collection<Discord.Snowflake, Discord.GuildMember>, guild: Discord.Guild) => void): this;
  once(event: 'guildMemberSpeaking', listener: (member: Discord.GuildMember, speaking: Readonly<Discord.Speaking>) => void): this;
  once(event: 'guildMemberUpdate', listener: (oldMember: Discord.GuildMember, newMember: Discord.GuildMember) => void): this;
  once(event: 'guildUpdate', listener: (oldGuild: Discord.Guild, newGuild: Discord.Guild) => void): this;
  once(event: 'message' | 'messageDelete' | 'messageReactionRemoveAll', listener: (message: Discord.Message) => void): this;
  once(event: 'messageDeleteBulk', listener: (messages: Discord.Collection<Discord.Snowflake, Discord.Message>) => void): this;
  once(event: 'messageReactionAdd' | 'messageReactionRemove', listener: (messageReaction: Discord.MessageReaction, user: Discord.User) => void): this;
  once(event: 'messageUpdate', listener: (oldMessage: Discord.Message, newMessage: Discord.Message) => void): this;
  once(event: 'presenceUpdate', listener: (oldPresence: Discord.Presence | undefined, newPresence: Discord.Presence) => void): this;
  once(event: 'rateLimit', listener: (rateLimitData: Discord.RateLimitData) => void): this;
  once(event: 'ready' | 'invalidated', listener: () => void): this;
  once(event: 'roleCreate' | 'roleDelete', listener: (role: Discord.Role) => void): this;
  once(event: 'roleUpdate', listener: (oldRole: Discord.Role, newRole: Discord.Role) => void): this;
  once(event: 'typingStart' | 'typingStop', listener: (channel: Discord.Channel, user: Discord.User) => void): this;
  once(event: 'userUpdate', listener: (oldUser: Discord.User, newUser: Discord.User) => void): this;
  once(event: 'voiceStateUpdate', listener: (oldState: Discord.VoiceState, newState: Discord.VoiceState) => void): this;
  once(event: 'webhookUpdate', listener: (channel: Discord.TextChannel) => void): this;
  once(event: 'shardDisconnect', listener: (event: CloseEvent, id: number) => void): this;
  once(event: 'shardError', listener: (error: Error, id: number) => void): this;
  once(event: 'shardReady' | 'shardReconnecting', listener: (id: number) => void): this;
  once(event: 'shardResume', listener: (id: number, replayed: number) => void): this;
  //once(event: string, listener: (...args: any[]) => void): this;
}
